Linux
-----
centos7
redhat
ubuntu
amazon linux
wind

aws
---
ec2 service -> to create servers

1. type of os
2. type of instance( small or large or xlarge)
3. enable the port details for access the server -> ssh port to connect linux server
4. create the key or .pem file -> to login the server we need password that password we can use the key or .pem file

Note: key we will create only one time same key will use for every new instance or server.
-----

AWS Ec2 instance usernames
--------------------------

os type                  usernames
-------                  ----------
centos                   centos             
redhat                   ec2-user
ubuntu                   ubuntu
amazon linux             ec2-user

Command to access the ec2 instance
-----------------------------------
ssh -i .pemkey name username of server@ip address of server









GIT Commands


1.	Git Cone repository URL -> To clone the repository code from remote to local desktop.
2.	Git Status -> To check untracked files/folders in GIT
3.	Git add filename/foldername -> To add the changes 
4.	Git commit -m “message” -> To commit the changes
5.	Git push origin branchname -> To push the changes from local folder to Remote repository.
6.	Git branch -> To check the list of branches in repository
7.	Git checkout branch name -> to switch one branch to other branch
8.	Git checkout -b branchname -> to create the new branch
9.	Git pull -> to get the updated to code from remote repository to local repository.
10.	Git merge -> to combine the code from one branch to other branch
11.	Git reset -> to reset the entire tree
12.	Git revert -> undo the change
13.	Git push origin - -delete branchname -> To delete the branch in remote repository

How to login ec2 instance
-------------------------
We can use Gitbash or putty or MobaXterm to connect the ec2 instance.






Linux commands
1.mkdir -> To create the folders
ex: mkdir test1
2.ls -> to check list of folders or files
3. ls -lart -> to check list of folders or files with hidden files also
4. pwd -> to check current path
5. cd -> to go inside folder
6. cd ..  -> one step back from current location
7. cd ../.. -> Two steps back from current location
8. cd ../../.. -> Three steps back from current location
9. rm -rf -> to delete the files or folders
10. touch -> to create the file
11. vi (or) vim -> to edit the files
12. esc :wq! -> to save quit from file
13. esc :q! -> with out save quit from file
14. cat -> to view the content inside file.
15. sudo su -> login as root account
16. wget -> webget command used to download package from internet
17. yum -> to install the packages will use yum command
18. copy -> copy the folder or file with in server.
19.scp -> copy the file or folder from one server to other server.
20. ssh -> command used for connect the servers.
21. chmod -> used to change the user permission
22. crontab -> used for schedule the jobs.
23. tree name -- open role

Linux Commands

User information:cat /etc/passwd
To move Root/Admin : Sudo su
Create User: useradd Bose
User login: su -user name
To exit user: exit
To know password: cat /etc/shadow
To create User password: passwd Bose
To know group: cat /etc/group
To create new group; groupadd Name
To attach to group: usermod -aG group name user name
To know user group : id Bose
How to rename group name: groupmod -n New name old name
To delete a group: groupdel group name
To Lock user : usermod -L user name
To unlock user : usermod -U user name
To take backup of user data : cp /home/user name
To remove user : userdel user name
To remove completely user : userdel -r user name
To exit: ctrl c
To exit user: ctrl d
Switch user : su - User name
To remove user from group: gpasswd -d username group name
To download from web s/w : wget
yum = yellow dog update manager
To install package: yum install package
To know packages installed: rpm -qa
rpm: red-hot package manager
To know total packages installed: rpm -qa | WC -l
To know total packages installed in page by page : rpm -qa | less
F: to move forward
B: to move backward
Q: to quit
To get information of particular package...:
rpm -qi package name ( here q refers to query and I refers to information)
To know file in a package: rpm - qf / etc/group
To know file in a package: rpm - qf / etc/passwd
To know file name in package: rpm -qf /use/bin/whoami
To install a package: yum install package name
Ex : yum install httpd
To uninstall a package: yum remove package name
To mount drive in pc : ls /mnt/
To select drive in pc : cd /mnt/c






vi ~/.bashrc
export JAVA_HOME=/opt/jdk1.8.0_171
export PATH=$PATH:JAVA_HOME/bin
source ~/.bashrc
yum install java -y
wget http://www.apache.org/dist/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz
vi ~/.bashrc
export M2_HOME=/usr/local/apache-maven
export M2=$M2_HOME/bin
export PATH=$M2:$PATH
source ~/.bashrc
yum install epel-release -y
wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat-stable/jenkins.repo
rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key
yum install jenkins -y
systemctl start jenkins
systemctl status jenkins






vi ~/.bashrc
export JAVA_HOME=/opt/jdk1.8.0_171
export PATH=$PATH:JAVA_HOME/bin
source ~/.bashrc
yum install java -y
cd /usr/local
mkdir apache-maven
cd /home/centos
wget http://www.apache.org/dist/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz
yum install wget -y
wget http://www.apache.org/dist/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz
ls
tar -xzf apache-maven-3.3.9-bin.tar.gz
ls
cd apache-maven-3.3.9
ls
cp -r * /usr/local/apache-maven
cd /usr/local/apache-maven
ls

vi ~/.bashrc
export M2_HOME=/usr/local/apache-maven
export M2=$M2_HOME/bin
export PATH=$M2:$PATH
source ~/.bashrc


yum install epel-release -y
wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat-stable/jenkins.repo
rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key
yum install jenkins -y
systemctl start jenkins

rm -rf /etc/yum.repos.d/jenkins.repo
rm -fr /var/cache/yum/*
yum repolist
yum remove jenkins -y
yum install epel-release -y
wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat-stable/jenkins.repo
rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key
yum install jenkins-2.346.1 -y
systemctl start jenkins
systemctl status jenkins


How to start the nexus server:          class 16---date 20-10
-------------------------------

login the server ssh -i .pem centos@ip
sudo su
su - centos
service nexus start

http://ipaddress:8081

username: admin
password: admin123








27/10 class 19 ( ansible host &remote server instalation)


sudo yum install epel-release -y
yum install python3 -y
pip3 install awscli
vi ~/.bashrc
export PATH=$PATH:/usr/local/bin/
source ~/.bashrc
yum install ansible -y
ansible --version
aws configure



02-11 class 23


[java]
13.232.247.232 ansible_ssh_user=centos ansible_ssh_private_key_file=/home/centos/inventory/gani.pem


---
- hosts: java
  become: yes
  tasks:

  - name: Install Packages
    yum: name={{ item }}
    with_items:
      - java






curl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -


sudo yum install nodejs -y


curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo

sudo rpm --import https://dl.yarnpkg.com/rpm/pubkey.gpg


sudo yum install yarn -y



class 24    03-11






---
- hosts: localhost
  become: yes
  tasks:

  - name: upgrade all packages
    yum: name=* state=latest

  - name: Install Packages
    yum: name={{ item }} update_cache=yes state=latest
    with_items:
      - epel-release
      - wget

  - name: Install Rebbitmq
    shell: yes |  yum install rabbitmq-server

  - name: start rabbitmq
    shell: |
          systemctl start rabbitmq-server
          systemctl enable rabbitmq-server


- hosts: rabbit
  tasks:

  - name: Copy a file to remote server
    copy:
      src: /var/lib/rabbitmq/.erlang.cookie
      dest: /home/centos





docker class 26 08-11-2022

8. docker install
	1. curl -fsSL https://get.docker.com/ | sh
	2. systemctl start docker
	3. systemctl status docker
   cat /etc/*release




docker class 27 09-11-2022

docker pull jenkins/jenkins
docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins



AZURE KUBERNATES CLASS 31 15-11-2022

kubectl get nodes
helm repo add jupyterhub https://jupyterhub.github.io/helm-chart/
helm repo update

openssl rand -hex 32
xxxxxxxxxxxx
touch config.yaml

proxy:
  secretToken: "958d2719ed3083831d581d36f775dc82d48aab5d0556da881ad9cb94a266461a"
  

RELEASE=jupyterhub
NAMESPACE=jhub
helm upgrade --cleanup-on-fail \
  --install $RELEASE jupyterhub/jupyterhub \
  --namespace $NAMESPACE \
  --create-namespace \
  --version=0.10.6 \
  --values config.yaml
  
  
  
  kubectl get services -n jhub



                                          CLASS 31 DATE 15-11-2022 PORTAINER.IO SETUP IN KUBERNETES


kubectl get sc
kubectl patch storageclass default -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
helm repo add portainer https://portainer.github.io/k8s/
helm repo update
helm install --create-namespace -n portainer portainer portainer/portainer     --set service.type=LoadBalancer
kubectl get --namespace portainer svc -w portainer
kubectl get namespace
kubectl get po -A

                                  CLASS 35 DATE 22-11-2022 cicd pipeline


vim /etc/ssh/sshd_config
vim /etc/sudoers
                               docker install
	1. curl -fsSL https://get.docker.com/ | sh
	2. systemctl start docker
	3. systemctl status docker

                          kubectl file creation

ssh-keygen



curl -Lo kops https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
chmod +x ./kops
sudo mv ./kops /usr/local/bin
curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl




                                   if you need mail notification 
pipeline {  
     agent any  
     stages {  
         stage('Test') {  
             steps {  
                 sh 'echo "Fail!"; exit 1'  
             }  
         }  
     }  
     post {  
         always {  
             echo 'This will always run'  
         }  
         success {  
             echo 'This will run only if successful'  
         }  
         failure {  
             mail bcc: '', body: "<b>Example</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "ERROR CI: Project name -> ${env.JOB_NAME}", to: "foo@foomail.com";  
         }  
         unstable {  
             echo 'This will run only if the run was marked as unstable'  
         }  
         changed {  
             echo 'This will run only if the state of the Pipeline has changed'  
             echo 'For example, if the Pipeline was previously failing but is now successful'  
         }  
     }  
 }




                                CLASS 37 DATE 24-11-2022 SONARQUBE cicd pipeline


sonarqube backend environment creation

cd /opt

yum install unzip -y

mkdir sonar-scanner

wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip

unzip sonar-scanner-cli-4.2.0.1873-linux.zip

cd sonar-scanner-4.2.0.1873-linux/

cp -r * /opt/sonar-scanner

cd ..

cd sonar-scanner

ls

cd bin	

pwd

/opt/sonar-scanner/bin




                    CLASS 40 DATE 30-11-2022 git version(2.0) install in azure cluster

sudo yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
sudo yum install git -y
git --version

                      CLASS 48 DATE 13-12-2022  install terraform in jenkins server( centos )

terraform install in centos:
----------------------------

sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
sudo yum -y install terraform

vi ~/.bashrc

export PATH=$PATH:/usr/bin/
export PATH=$PATH:/usr/local/bin/

source ~/.bashrc
yum install python3 -y
pip3 install awscli

aws configure


















                   CLASS 50 DATE 18-12-2022  Variable.tf ( inside region,access-key & secret-key  collected AWS )

variable.tf (inside this code through )

provider "aws" {
	region = "ap-south-1"
	access_key = "AKIAVFC6JMRHK25KOM4V"
	secret_key     = "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"
}




main.tf (inside this code through )

resource "aws_instance" "web" {
  ami           = "ami-0763cf792771fe1bd"
  instance_type = "t3.micro"

  tags = {
    Name = "HelloWorld"
  }
}







                                  I AM USER ( main.tf)

resource "aws_iam_user" "lb" {
  name = "ganesh"
  path = "/system/"

  tags = {
    tag-key = "tag-value"
  }
}




                             I AM group creation ( main.tf)


resource "aws_iam_group" "developers" {
  name = "ganesh"
  path = "/users/"
}


                             I AM policy creation ( main.tf)


resource "aws_iam_policy" "policy" {
  name        = "test_policy"
  path        = "/"
  description = "My test policy"

  # Terraform's "jsonencode" function converts a
  # Terraform expression result to valid JSON syntax.
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "ec2:Describe*",
        ]
        Effect   = "Allow"
        Resource = "*"
      },
    ]
  })
}

